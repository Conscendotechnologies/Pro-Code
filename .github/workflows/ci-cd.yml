name: Pro-Code CI/CD Pipeline

on:
  # Trigger on PRs to main branch
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]
  
  # Trigger on pushes to main branch (merges)
  push:
    branches: [ main ]
  
  # Allow manual trigger
  workflow_dispatch:

jobs:
  # Job 1: Build and Test (runs on PRs and pushes)
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: '10.8.1'
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.19.2'
        cache: 'pnpm'
    
    - name: Install dependencies
      run: pnpm install --no-frozen-lockfile
    
    - name: Run linting
      run: pnpm lint
    
    - name: Run type checking
      run: pnpm check-types
    
    - name: Build project
      run: pnpm build
    
    - name: Check build output
      run: |
        echo "Build completed successfully!"
        if [ -d "out" ]; then
          echo "📁 Build output (out directory):"
          ls -la out/ | head -10
        fi
        if [ -d "dist" ]; then
          echo "📁 Build output (dist directory):"
          ls -la dist/ | head -10
        fi

  # Job 2: Create VSIX Package (only on merge to main)
  package:
    runs-on: ubuntu-latest
    needs: build-and-test
    # Only run on push to main (i.e., after merge), not on PRs
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: '10.8.1'
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.19.2'
        cache: 'pnpm'
    
    - name: Install dependencies
      run: pnpm install --no-frozen-lockfile
    
    - name: Build project
      run: pnpm build
    
    - name: Create VSIX package
      run: pnpm vsix
    
    - name: Find VSIX file
      id: find-vsix
      run: |
        # Look for VSIX files in common locations
        VSIX_FILE=""
        if [ -d "bin" ] && [ "$(ls bin/*.vsix 2>/dev/null | wc -l)" -gt 0 ]; then
          VSIX_FILE=$(ls bin/*.vsix | head -1)
        elif [ "$(ls *.vsix 2>/dev/null | wc -l)" -gt 0 ]; then
          VSIX_FILE=$(ls *.vsix | head -1)
        fi
        
        if [ -n "$VSIX_FILE" ]; then
          echo "Found VSIX: $VSIX_FILE"
          echo "vsix_path=$VSIX_FILE" >> $GITHUB_OUTPUT
          echo "vsix_name=$(basename $VSIX_FILE)" >> $GITHUB_OUTPUT
        else
          echo "Error: No VSIX file found!"
          exit 1
        fi
    
    - name: Generate checksums
      id: checksums
      run: |
        VSIX_FILE="${{ steps.find-vsix.outputs.vsix_path }}"
        SHA256=$(sha256sum "$VSIX_FILE" | awk '{print $1}')
        echo "$SHA256" > "${VSIX_FILE}.sha256"
        echo "sha256=$SHA256" >> $GITHUB_OUTPUT
        echo "✓ Checksum generated"
        echo "SHA256: $SHA256"
    
    - name: Get build timestamp
      id: timestamp
      run: |
        echo "build_date=$(date +'%Y.%m.%d-%H%M%S')" >> $GITHUB_OUTPUT
    
    - name: Get package version
      id: version
      run: |
        # Try to get version from package.json, fallback to 1.0.0 if not found
        if [ -f "package.json" ]; then
          VERSION=$(node -p "require('./package.json').version" 2>/dev/null || echo "1.0.0")
        else
          VERSION="1.0.0"
        fi
        
        # Check if VERSION is empty or undefined
        if [ -z "$VERSION" ] || [ "$VERSION" == "undefined" ]; then
          VERSION="1.0.0"
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Package version: $VERSION"
    
    - name: Get last release tag
      id: last_release
      run: |
        # Get the last release tag
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        echo "last_tag=$LAST_TAG" >> $GITHUB_OUTPUT
        echo "Last release tag: $LAST_TAG"
    
    - name: Generate changelog
      id: changelog
      run: |
        LAST_TAG="${{ steps.last_release.outputs.last_tag }}"
        
        if [ -z "$LAST_TAG" ]; then
          echo "No previous release found. Generating changelog from all commits."
          COMMITS=$(git log --pretty=format:"- %s by @%an in %h" --no-merges | head -n 20)
        else
          echo "Generating changelog from $LAST_TAG to HEAD"
          COMMITS=$(git log $LAST_TAG..HEAD --pretty=format:"- %s by @%an in %h" --no-merges)
        fi
        
        # Check if there are any commits
        if [ -z "$COMMITS" ]; then
          COMMITS="- No changes since last release"
        fi
        
        # Save to file to handle multiline output properly
        echo "$COMMITS" > changelog.txt
        
        echo "changelog_file=changelog.txt" >> $GITHUB_OUTPUT
    
    - name: Read changelog
      id: read_changelog
      run: |
        CHANGELOG=$(cat changelog.txt)
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Get contributors
      id: contributors
      run: |
        LAST_TAG="${{ steps.last_release.outputs.last_tag }}"
        
        if [ -z "$LAST_TAG" ]; then
          CONTRIBUTORS=$(git log --pretty=format:"%an" --no-merges | sort -u | sed 's/^/@/' | paste -sd "," - | sed 's/,/, /g')
        else
          CONTRIBUTORS=$(git log $LAST_TAG..HEAD --pretty=format:"%an" --no-merges | sort -u | sed 's/^/@/' | paste -sd "," - | sed 's/,/, /g')
        fi
        
        if [ -z "$CONTRIBUTORS" ]; then
          CONTRIBUTORS="@${{ github.actor }}"
        fi
        
        echo "contributors=$CONTRIBUTORS" >> $GITHUB_OUTPUT
    
    - name: Upload VSIX artifact
      uses: actions/upload-artifact@v4
      with:
        name: siid-code-extension-${{ github.sha }}
        path: |
          ${{ steps.find-vsix.outputs.vsix_path }}
          ${{ steps.find-vsix.outputs.vsix_path }}.sha256
        retention-days: 30
    
    - name: Create Release
      if: startsWith(github.ref, 'refs/heads/main')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        COMMIT_SHA=$(git rev-parse --short HEAD)
        BUILD_DATE="${{ steps.timestamp.outputs.build_date }}"
        
        # Create a cleaner tag name: release-VERSION or release-VERSION-COMMIT_SHA
        TAG_NAME="release-${VERSION}"
        
        VSIX_FILE="${{ steps.find-vsix.outputs.vsix_path }}"
        VSIX_NAME="${{ steps.find-vsix.outputs.vsix_name }}"
        SHA256="${{ steps.checksums.outputs.sha256 }}"
        CHANGELOG="${{ steps.read_changelog.outputs.changelog }}"
        CONTRIBUTORS="${{ steps.contributors.outputs.contributors }}"
        LAST_TAG="${{ steps.last_release.outputs.last_tag }}"
        
        # Build the full changelog comparison URL
        if [ -n "$LAST_TAG" ]; then
          FULL_CHANGELOG="${LAST_TAG}...${TAG_NAME}"
        else
          FULL_CHANGELOG="${TAG_NAME}"
        fi
        
        # Create release notes
        cat > release_notes.md << 'RELEASE_NOTES'
        ## SIID Code Extension
        
        **Build Date:** BUILD_DATE_PLACEHOLDER
        **Version:** VERSION_PLACEHOLDER
        **Commit:** COMMIT_SHA_PLACEHOLDER
        
        ### Downloads:
        - **VSIX_NAME_PLACEHOLDER** - VS Code Extension Package
        
        ### Checksums:
        Use the .sha256 file to verify your download integrity.
        
        **SHA256:** `SHA256_PLACEHOLDER`
        
        ### What's Changed
        CHANGELOG_PLACEHOLDER
        
        **Full Changelog:** FULL_CHANGELOG_PLACEHOLDER
        
        ### Contributors
        CONTRIBUTORS_PLACEHOLDER
        
        ---
        *This is an automated build from the main branch.*
        RELEASE_NOTES
        
        # Replace variables in the release notes
        sed -i "s|BUILD_DATE_PLACEHOLDER|$BUILD_DATE|g" release_notes.md
        sed -i "s|VERSION_PLACEHOLDER|$VERSION|g" release_notes.md
        sed -i "s|COMMIT_SHA_PLACEHOLDER|$COMMIT_SHA|g" release_notes.md
        sed -i "s|VSIX_NAME_PLACEHOLDER|$VSIX_NAME|g" release_notes.md
        sed -i "s|SHA256_PLACEHOLDER|$SHA256|g" release_notes.md
        sed -i "s|FULL_CHANGELOG_PLACEHOLDER|$FULL_CHANGELOG|g" release_notes.md
        
        # Handle multiline changelog
        sed -i "/CHANGELOG_PLACEHOLDER/r changelog.txt" release_notes.md
        sed -i "/CHANGELOG_PLACEHOLDER/d" release_notes.md
        
        # Add contributors
        echo "$CONTRIBUTORS" > contributors_temp.txt
        sed -i "/CONTRIBUTORS_PLACEHOLDER/r contributors_temp.txt" release_notes.md
        sed -i "/CONTRIBUTORS_PLACEHOLDER/d" release_notes.md
        
        # Create release with a cleaner title
        gh release create "$TAG_NAME" \
          --title "SIID Code Extension v${VERSION}" \
          --notes-file release_notes.md \
          "$VSIX_FILE" \
          "${VSIX_FILE}.sha256"

  # Job 3: Code Quality Checks (runs on PRs)
  quality-checks:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: '10.8.1'
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.19.2'
        cache: 'pnpm'
    
    - name: Install dependencies
      run: pnpm install --no-frozen-lockfile
    
    - name: Check package.json scripts
      run: |
        echo "Available scripts:"
        node -p "Object.keys(require('./package.json').scripts || {}).join('\n')"
    
    - name: Run formatting check
      run: pnpm format
    
    - name: Check for security vulnerabilities
      run: |
        pnpm audit --audit-level moderate || echo "Security audit completed with warnings"
    
    - name: Check bundle (if applicable)
      run: |
        echo "Creating bundle to check size..."
        pnpm bundle
        if [ -d "out" ]; then
          echo "📦 Bundle size (out directory):"
          du -sh out/
        fi
        if [ -d "dist" ]; then
          echo "📦 Bundle size (dist directory):"
          du -sh dist/
        fi
