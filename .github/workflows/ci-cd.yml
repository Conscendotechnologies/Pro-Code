name: Pro-Code CI/CD Pipeline

on:
  # Trigger on PRs to main branch
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]
  
  # Trigger on pushes to main branch (merges)
  push:
    branches: [ main ]
  
  # Allow manual trigger
  workflow_dispatch:

jobs:
  # Job 1: Build and Test (runs on PRs and pushes)
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: '10.8.1'
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.19.2'
        cache: 'pnpm'
    
    - name: Install dependencies
      run: pnpm install --no-frozen-lockfile
    
    - name: Run linting
      run: pnpm lint
    
    - name: Run type checking
      run: pnpm check-types
    
    - name: Build project
      run: pnpm build
    
    - name: Check build output
      run: |
        echo "Build completed successfully!"
        if [ -d "out" ]; then
          echo "📁 Build output (out directory):"
          ls -la out/ | head -10
        fi
        if [ -d "dist" ]; then
          echo "📁 Build output (dist directory):"
          ls -la dist/ | head -10
        fi

  # Job 2: Create VSIX Package (only on merge to main)
  package:
    runs-on: ubuntu-latest
    needs: build-and-test
    # Only run on push to main (i.e., after merge), not on PRs
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: '10.8.1'
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.19.2'
        cache: 'pnpm'
    
    - name: Install dependencies
      run: pnpm install --no-frozen-lockfile
    
    - name: Build project
      run: pnpm build
    
    - name: Create VSIX package
      run: pnpm vsix
    
    - name: Find VSIX file
      id: find-vsix
      run: |
        # Look for VSIX files in common locations
        VSIX_FILE=""
        if [ -d "bin" ] && [ "$(ls bin/*.vsix 2>/dev/null | wc -l)" -gt 0 ]; then
          VSIX_FILE=$(ls bin/*.vsix | head -1)
        elif [ "$(ls *.vsix 2>/dev/null | wc -l)" -gt 0 ]; then
          VSIX_FILE=$(ls *.vsix | head -1)
        fi
        
        if [ -n "$VSIX_FILE" ]; then
          echo "Found VSIX: $VSIX_FILE"
          echo "vsix_path=$VSIX_FILE" >> $GITHUB_OUTPUT
          echo "vsix_name=$(basename $VSIX_FILE)" >> $GITHUB_OUTPUT
        else
          echo "Error: No VSIX file found!"
          exit 1
        fi
    
    - name: Upload VSIX artifact
      uses: actions/upload-artifact@v4
      with:
        name: pro-code-extension-${{ github.sha }}
        path: ${{ steps.find-vsix.outputs.vsix_path }}
        retention-days: 30
    
    - name: Create Release (fixed)
      if: startsWith(github.ref, 'refs/heads/main')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Get package version
        VERSION=$(node -p "require('./package.json').version")
        COMMIT_SHA=$(git rev-parse --short HEAD)
        TAG_NAME="v${VERSION}-main-${COMMIT_SHA}"
        
        # Create release WITHOUT --prerelease flag
        gh release create "$TAG_NAME" \
          --title "Main Build $TAG_NAME" \
          --notes "Automated build from main branch commit $COMMIT_SHA" \
          "${{ steps.find-vsix.outputs.vsix_path }}"

  # Job 3: Code Quality Checks (runs on PRs)
  quality-checks:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: '10.8.1'
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.19.2'
        cache: 'pnpm'
    
    - name: Install dependencies
      run: pnpm install --no-frozen-lockfile
    
    - name: Check package.json scripts
      run: |
        echo "Available scripts:"
        node -p "Object.keys(require('./package.json').scripts || {}).join('\n')"
    
    - name: Run formatting check
      run: pnpm format
    
    - name: Check for security vulnerabilities
      run: |
        pnpm audit --audit-level moderate || echo "Security audit completed with warnings"
    
    - name: Check bundle (if applicable)
      run: |
        echo "Creating bundle to check size..."
        pnpm bundle
        if [ -d "out" ]; then
          echo "📦 Bundle size (out directory):"
          du -sh out/
        fi
        if [ -d "dist" ]; then
          echo "📦 Bundle size (dist directory):"
          du -sh dist/
        fi
